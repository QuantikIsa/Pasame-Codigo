---
export interface Props {
  title?: string;
}
const { title = "" } = Astro.props;
---
<script>
    import mermaid from "mermaid";
    // Postpone mermaid initialization
    mermaid.initialize({ startOnLoad: false });

    function extractMermaidCode() {
    // Find all mermaid components
    const mermaidElements = document.querySelectorAll("figure.expandable-diagram");
    
    mermaidElements.forEach((element) => {
        // Find the `copy` button for each component
        const copyButton = element.querySelector(".copy button");

        // Ensure copyButton is an HTML element and has the dataset property
        if (copyButton instanceof HTMLElement && copyButton.dataset.code) {
        // Extract the code from the `data-code` attribute
        let code = copyButton.dataset.code;

        // Replace the U+007f character with `\n` (simulating new lines)
        code = code.replace(/\u007F/g, "\n");

        // Construct the `pre` element for the diagram code
        const preElement = document.createElement("pre");
        preElement.className = "mermaid not-prose";
        preElement.innerHTML = code;

        // Find the diagram content container
        const diagramContainer = element.querySelector(".diagram-content");

        // Ensure the diagramContainer and its firstChild exist before replacing
        if (diagramContainer && diagramContainer.firstChild) {
            diagramContainer.replaceChild(preElement, diagramContainer.firstChild);
        }
        }
    });
    }
  
    // Wait for the DOM to be fully loaded
    document.addEventListener("DOMContentLoaded", async () => {
      extractMermaidCode();
      mermaid.initialize({ startOnLoad: true });
    });
</script>

<figure class="expandable-diagram">
    <figcaption>{title}</figcaption>
  
    <div class="diagram-content">Loading diagram...</div>
  
    <details>
      <summary>Source</summary>
      <slot />
    </details>
  </figure>