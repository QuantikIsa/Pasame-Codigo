---
import contributeImage from "@assets/contribute-github.jpg";
import defaultImage from "@assets/open-graph-github.jpg";

interface Repo {
  href: string;
  title: string;
  description?: string;
}

interface Props {
  entries: Repo[];
}

const { entries } = Astro.props;

// Always add the contribute card at the end
const contributeCard: Repo = {
  href: "https://github.com/TeenBiscuits/Pasame-Codigo/issues/new",
  title: "¿Tienes un repo que molaría aquí?",
  description:
    "¡Abre un issue en el repositorio y lo añadiremos en cuanto podamos!",
};

// Function to get OG image URL from a given URL
async function getOgImage(url: string): Promise<string> {
  try {
    const response = await fetch(url);
    const html = await response.text();

    // Try to find og:image meta tag
    const ogImageMatch =
      html.match(
        /<meta[^>]*property=["']og:image["'][^>]*content=["']([^"']*)["'][^>]*>/i,
      ) ||
      html.match(
        /<meta[^>]*content=["']([^"']*)["'][^>]*property=["']og:image["'][^>]*>/i,
      );

    if (ogImageMatch && ogImageMatch[1]) {
      return ogImageMatch[1];
    }

    // Fallback to twitter:image if og:image not found
    const twitterImageMatch =
      html.match(
        /<meta[^>]*name=["']twitter:image["'][^>]*content=["']([^"']*)["'][^>]*>/i,
      ) ||
      html.match(
        /<meta[^>]*content=["']([^"']*)["'][^>]*name=["']twitter:image["'][^>]*>/i,
      );

    if (twitterImageMatch && twitterImageMatch[1]) {
      return twitterImageMatch[1];
    }

    // Default fallback image
    return contributeImage.src;
  } catch (error) {
    console.error(`Failed to fetch OG image for ${url}:`, error);
    return contributeImage.src;
  }
}

// Fetch OG images for all entries
const entriesWithImages = await Promise.all(
  entries.map(async (entry) => ({
    ...entry,
    thumbnail: await getOgImage(entry.href),
  })),
);

// Add the contribute card with its static image at the end
const allEntries = [
  ...entriesWithImages,
  {
    ...contributeCard,
    thumbnail: contributeImage.src,
  },
];
---

<div class="repos-showcase">
  {
    allEntries.map((entry) => (
      <a
        href={entry.href}
        class="repo-card"
        target="_blank"
        rel="noopener noreferrer"
      >
        <div class="repo-thumbnail">
          <img src={entry.thumbnail} alt={entry.title} loading="lazy" />
        </div>
        <div class="repo-content">
          <h3 class="repo-title">{entry.title}</h3>
          {entry.description && (
            <p class="repo-description">{entry.description}</p>
          )}
        </div>
      </a>
    ))
  }
</div>

<style>
  .repos-showcase {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
  }

  .repo-card {
    display: flex;
    flex-direction: column;
    background: var(--sl-color-black);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.75rem;
    overflow: hidden;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
  }

  .repo-card:hover {
    background: var(--sl-color-gray-7, var(--sl-color-gray-6));
    border-color: var(--sl-color-gray-2);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .repo-thumbnail {
    width: 100%;
    height: 200px;
    overflow: hidden;
    background: var(--sl-color-gray-6);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .repo-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .repo-content {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
  }

  .repo-title {
    font-size: var(--sl-text-h5);
    font-weight: 600;
    color: var(--sl-color-white);
    margin: 0;
    line-height: 1.4;
  }

  .repo-description {
    font-size: var(--sl-text-sm);
    color: var(--sl-color-gray-2);
    margin: 0;
    line-height: 1.5;
  }

  @media (max-width: 768px) {
    .repos-showcase {
      grid-template-columns: 1fr;
    }
  }
</style>
